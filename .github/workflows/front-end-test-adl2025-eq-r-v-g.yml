# Workflow de DIAGNÓSTICO para identificar el problema exacto
name: 🔍 DIAGNÓSTICO - Pruebas E2E

on:
  push:
    branches: [ githubActions ]
  workflow_dispatch:

env:
  NODE_VERSION: '22'

jobs:
  diagnostico-completo:
    name: 🔬 Diagnóstico Completo del Error
    runs-on: ubuntu-latest
    
    steps:
      # 1. Checkout
      - name: 📦 Checkout código
        uses: actions/checkout@v4

      # 2. Node.js setup
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # 3. Instalar dependencias con verbose
      - name: 📥 Instalar dependencias (verbose)
        run: |
          echo "=== INSTALANDO DEPENDENCIAS ==="
          npm ci --verbose
          echo "=== DEPENDENCIAS INSTALADAS ==="
          npm list --depth=0

      # 4. Verificar instalación de Allure
      - name: 🔍 Verificar instalación de Allure
        run: |
          echo "=== VERIFICANDO ALLURE ==="
          echo "Buscando allure-cucumberjs..."
          find node_modules -name "*allure*" -type d
          echo ""
          echo "Verificando versión de allure-cucumberjs..."
          npm list allure-cucumberjs || echo "No encontrado"
          echo ""
          echo "Contenido de node_modules/allure-cucumberjs:"
          ls -la node_modules/allure-cucumberjs/ || echo "Directorio no existe"

      # 5. Instalar Playwright
      - name: 🎭 Instalar Playwright
        run: npx playwright install --with-deps chromium

      # 6. Crear directorios y verificar permisos
      - name: 📁 Crear directorios y verificar permisos
        run: |
          echo "=== CREANDO DIRECTORIOS ==="
          mkdir -p allure-results reports/videos reports/screenshots
          
          echo "=== VERIFICANDO PERMISOS ==="
          ls -la
          
          echo "=== PROBANDO ESCRITURA EN ALLURE-RESULTS ==="
          echo '{"test": "data"}' > allure-results/test.json
          cat allure-results/test.json
          rm allure-results/test.json
          echo "✅ Permisos de escritura OK"

      # 7. Test de conectividad
      - name: 🌐 Test de conectividad a la aplicación
        run: |
          echo "=== PROBANDO CONECTIVIDAD ==="
          curl -I https://test-adl.leonardojose.dev/login || echo "❌ Sin conectividad"
          curl -s https://test-adl.leonardojose.dev/login | head -10 || echo "❌ Error en contenido"

      # 8. Ejecutar UN SOLO FEATURE para debugging
      - name: 🧪 Ejecutar SOLO login.feature (debugging)
        run: |
          echo "=== EJECUTANDO SOLO LOGIN.FEATURE ==="
          echo "Verificando que existe el archivo..."
          ls -la features/login.feature
          
          echo "Contenido del feature:"
          head -10 features/login.feature
          
          echo "=== EJECUTANDO CUCUMBER CON UN SOLO FEATURE ==="
          npx cucumber-js features/login.feature --verbose --dry-run
          
          echo "=== EJECUCIÓN REAL (SOLO LOGIN) ==="
          timeout 10m npx cucumber-js features/login.feature --verbose 2>&1 | tee cucumber-output.log
          
          CUCUMBER_EXIT=$?
          echo "Exit code de Cucumber: $CUCUMBER_EXIT"
          
          if [ $CUCUMBER_EXIT -ne 0 ]; then
            echo "=== ERROR EN CUCUMBER - ANALIZANDO ==="
            echo "Últimas 50 líneas del output:"
            tail -50 cucumber-output.log
            
            echo "=== VERIFICANDO ARCHIVOS GENERADOS ==="
            ls -la allure-results/ || echo "No se generó allure-results"
            ls -la reports/ || echo "No se generó reports"
            
            exit $CUCUMBER_EXIT
          fi
        env:
          PLAYWRIGHT_BROWSER: chromium
          HEADLESS: true
          CI: true
          BASE_URL: https://test-adl.leonardojose.dev

      # 9. Verificar qué generó Allure
      - name: 📋 Verificar resultados de Allure
        if: always()
        run: |
          echo "=== ANALIZANDO RESULTADOS DE ALLURE ==="
          
          if [ -d "allure-results" ]; then
            echo "✅ Directorio allure-results existe"
            echo "Contenido:"
            ls -la allure-results/
            
            echo "=== CONTENIDO DE ARCHIVOS ALLURE ==="
            for file in allure-results/*.json; do
              if [ -f "$file" ]; then
                echo "--- $file ---"
                head -5 "$file"
                echo ""
              fi
            done
          else
            echo "❌ No se generó directorio allure-results"
          fi

      # 10. Test manual del reporter Allure
      - name: 🔧 Test manual del reporter Allure
        if: always()
        run: |
          echo "=== PROBANDO ALLURE REPORTER MANUALMENTE ==="
          
          # Crear un resultado fake para probar Allure
          cat > allure-results/fake-test.json << 'EOF'
          {
            "uuid": "test-uuid",
            "name": "Test Manual",
            "status": "passed",
            "start": 1640995200000,
            "stop": 1640995260000
          }
          EOF
          
          echo "Archivo fake creado:"
          cat allure-results/fake-test.json
          
          # Probar si el problema es con el reporter específico
          echo "=== PROBANDO DIFERENTES REPORTERS ==="
          
          # Test 1: Sin reporter
          echo "Test sin reporter Allure..."
          npx cucumber-js features/login.feature --dry-run --format progress || echo "Error sin reporter"
          
          # Test 2: Con reporter JSON simple
          echo "Test con reporter JSON simple..."
          npx cucumber-js features/login.feature --dry-run --format json:test-simple.json || echo "Error con JSON simple"

      # 11. Upload de logs para análisis
      - name: 📤 Upload logs para análisis
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: diagnostic-logs
          path: |
            cucumber-output.log
            allure-results/
            reports/
            test-simple.json
          retention-days: 7